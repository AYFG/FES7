// 함수의 호이스팅(Hoisting)
// 호이스팅(한국어로 번역하면 ‘끌어 올리기’)은 변수나 함수 선언문이 해당 스코프의 최상단으로 끌어올려지는 현상을 말합니다. 즉, 코드에서 변수나 함수를 선언하기 전에 해당 변수나 함수를 사용할 수 있는 것처럼 보이는 현상을 의미합니다.

// var x //선언만 끌어올리기 때문에 값은 출력 안되는 모습
console.log(x); //x를 찾을 수 없어야 하는데 출력이 undefined가 나온다..
console.log(y); //오류
console.log(z); //오류

var x = 1; //최상단으로 끌어올려졌다
let y = 2;
const z = 3;
// 위에서 아래로 읽는데 출력이 변수 선언보다 위에 있다.

// 위의 코드에는 변수 선언문과 함수 선언문이 정의되어 있습니다. 그리고 해당 변수와 함수를 선언하기 전에 각각 참조하고 있습니다. 하지만 실행 결과에서는 변수 x는 **`undefined`**로, 함수 sayHi는 "Hello, lions!"를 출력하게 됩니다. 이것은 호이스팅에 의해 변수와 함수가 해당 스코프의 최상단으로 끌어올려졌기 때문입니다.

// 하지만, 호이스팅은 변수의 선언만을 끌어올리고, 변수의 초기화나 할당은 끌어올려지지 않습니다. 따라서 변수의 값을 초기화하기 전에 참조하면 **`undefined`**가 반환되는 것입니다.

// 따라서 함수 표현식은 변수 선언만을 끌어올리기 때문에 함수를 선언하기 전에 함수를 호출하면 에러가 발생합니다. 이와 반대로 함수 선언문은 전체를 끌어올리기 때문에 위의 코드처럼 함수를 선언하기 전에 함수를 호출할 수 있습니다.

// 비교적 최근에 등장한 let, const, class를 이용한 선언문은 일시적 사각지대(Temporal Dead Zone)라는것을 만들어서 호이스팅이 되었지만 안된 것처럼 동작하게 합니다. 그 이유는 호이스팅은 개발자가 의도하지 않은 결과를 만들기 때문에, 코드의 가독성과 유지보수성을 해치므로, 호이스팅이 발생하지 않도록 하기 위해서입니다.

test();
function test() {
  console.log("test");
} // 변수 선언 없이 함수가 선언되어 순서에 상관없이 호이스팅 되어 실행됨

const test = function () {
  console.log("test");
}; // 변수로 함수를 선언하여 TDZ에 넣는다.
//  TDZ 언제까지? 변수가 초기화 될 때까지

//   Temporal Dead Zone(TDZ)이란? 코드상에 let, const로 선언된 변수와 상수는
//   TDZ(Temporal Dead Zone. 임시 접근 불가구역) 구역에 배치됩니다.
//   이 값들은 선언에 대한 초기화가 실행된 후에 TDZ에서 제거되어 사용 가능한 상태가
//   됩니다. TDZ는 말 그대로 접근이 불가능하기 때문에, 초기화 전에 TDZ에 배치된
//   변수에 접근하려고 하면 에러를 발생시키게 됩니다.
