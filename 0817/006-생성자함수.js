// 생성자 함수 (Constructor)

// 자바스크립트에서 객체를 생성하는 방식은 대표적으로 두 가지가 있습니다.

// 하나는 앞서서 배운 객체 리터렬 표현식, 그리고 나머지가 생성자 함수를 이용한 방식입니다.

// 따라서 생성자 함수는 사용자 정의 객체를 생성할 때 사용되는 함수입니다.

// 생성자 함수의 특징

// - 일반 함수와 구분하기 위해 생성자 함수 이름 첫 글자는 대문자로 시작합니다.
// - 반드시 'new' 연산자를 붙여 실행해야합니다. new 연산자는 생성자 함수의 this 가 인스턴스를 바라보도록 만들어주는 역할을 합니다.
let book = {
  책이름: "알잘딱깔센 JavaScript 비동기 프로그래밍 - 비동기 너 내 동기가 돼라",
  책가격: 0,
  저자: ["구나영", "김경림"],
  출판일: "2022.08.12",
};
// 책이 100권이라면?

function Book(책이름, 책가격, 저자, 출판일) {
  // 첫글자가 대문자면 생성자 함수구나
  this.책이름 = 책이름;
  this.책가격 = 책가격;
  this.저자 = 저자;
  this.출판일 = 출판일;
}

let book1 = new Book("JS", 0, ["이호준"], "2099.10.30");
let book2 = new Book("Python", 100000, ["이호준"], "2099.11.30");
let book3 = new Book("React", 1000000, ["이호준"], "2099.12.30");

console.log(book1, book2, book3);

function Book(책이름, 책가격, 저자, 출판일) {
  // this = {}
  this.책이름 = 책이름;
  this.책가격 = 책가격;
  this.저자 = 저자;
  this.출판일 = 출판일;
  // return this
}

/////////////////////////////////////
// 일반함수(new 키워드를 사용하지 않았을 경우)
function Book(책이름, 책가격, 저자, 출판일) {
  this.책이름 = 책이름;
  this.책가격 = 책가격;
  this.저자 = 저자;
  this.출판일 = 출판일;
  this.read = function () {
    console.log("reading.....");
  };
}

let book1 = Book("JS", 0, ["이호준"], "2099.10.30");
let book2 = Book("Python", 100000, ["이호준"], "2099.11.30");
let book3 = new Book("React", 1000000, ["이호준"], "2099.12.30");

console.log(book1, book2, book3); // book1과 book2는 반환값이 나와버림
// - 생성자 함수를 사용하는 이유
//     - 동일한 프로퍼티를 가지는 객체 생성
//     - prototype을 이용하여 메모리 효율을 높일 수 있음
